 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

//FCC Challenge - Basejump Module
app.get('/:timeString', function(req,res)
{

  var dateObj;
  var dateString = "";
  var timeParse;
  var timeString = req.params.timeString;
  if (Number.isInteger(parseInt(timeString,10)))
  {
      var unixInput = parseInt(timeString,10) * 1000;
      dateObj = new Date(unixInput);     //JS dates are * 1000 Unix time  
      console.log(unixInput, dateObj.valueOf());    
  }
  else
  {
      //Replace URL spaces with real spaces
      var re = new RegExp ('%20', 'gi');  
      timeString = timeString.replace(re, ' ');  

      dateObj = new Date(Date.parse(timeString));
  }

  dateString = dateObj.toDateString().split(' ');

  //Convert from abbreviated month to full month names
  var month ="";
  switch (dateObj.getMonth())
  {
      case 0:
          {
              month = 'January';
              break;
          }
      case 1:
          {
              month = 'February';
              break;
          }
      case 2:
          {
              month = 'March';
              break;
          }
      case 3:
          {
              month = 'April';
              break;
          }
      case 4:
          {
              month = 'May';
              break;
          }
      case 5:
          {
              month = 'June';
              break;
          }
      case 6:
          {
              month = 'July';
              break;
          }
      case 7:
          {
              month = 'August';
              break;
          }
      case 8:
          {
              month = 'September';
              break;
          }
      case 9:
          {
              month = 'October';
              break;
          }
      case 10:
          {
              month = 'November';
              break;
          }
      case 11:
          {
              month = 'December';
              break;
          }
  }
  dateString = month + ' ' + dateString[2] + ', ' + dateString[3]; 
  timeParse = 
      {
        "unix": parseInt(dateObj.valueOf() / 1000, 10),  //Divide by 1000 - Difference between Unix time and JS time
        "natural": dateString

      }  
  //console.log(JSON.stringify(timeParse));
  res.end(JSON.stringify(timeParse));
});


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});


